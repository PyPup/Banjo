<?xml version="1.0" encoding="utf-8"?>
<Project
	xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
	ToolsVersion="4.0"
	DefaultTargets="Package">

	<Import Project="$(MSBuildExtensionsPath)\ExtensionPack\4.0\MSBuild.ExtensionPack.tasks"/>

	<!-- Properties which control build configuration. -->
	<PropertyGroup>
		<BuildDir Condition="'$(BuildDir)' == ''">$(MSBuildProjectDirectory)</BuildDir>
		<RootDir Condition="'$(RootDir)' == ''">$(BuildDir)</RootDir>
		<Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
		<Platform Condition="'$(Platform)' == ''">Any CPU</Platform>
		<EnableIncrementalBuild Condition="'$(EnableIncrementalBuild)' != 'False'">True</EnableIncrementalBuild>
	</PropertyGroup>

	<!-- Properties to control package generation. -->
	<PropertyGroup>
		<PackSymbols Condition="'$(PackSymbols)' != 'True'">False</PackSymbols>
		<NuGetToolsPath Condition="'$(NuGetToolsPath)' == ''">$(MSBuildThisFileDirectory)</NuGetToolsPath>
		<NuGetExePath Condition="'$(NuGetExePath)' == ''">$(NuGetToolsPath)nuget.exe</NuGetExePath>
		<NuGetCommand Condition="'$(NuGetCommand)' == ''">"$(NuGetExePath)"</NuGetCommand>
	</PropertyGroup>

	<!-- Properties to control NUnit testing. -->
	<PropertyGroup>
		<NUnitToolPath Condition="'$(NUnitToolPath)' == ''">$(MSBuildProgramFiles32)\NUnit 2.5.9\bin\net-2.0\</NUnitToolPath>
		<TestResultsDir Condition="'$(TestResultsDir)' == ''">$(MSBuildProjectDirectory)\TestResults\</TestResultsDir>
	</PropertyGroup>

	<!-- Properties to control publishing of packages-->
	<PropertyGroup>
		<PackagePublishDir Condition="'$(PackagePublishDir)' == ''">$(MsBuildProjectDirectory)\Packages\</PackagePublishDir>
	</PropertyGroup>

	<!-- Properties to control MS Deploy generation -->
	<PropertyGroup>
		<MsDeployPackagesDir Condition="'$(MsDeployPackagesDir)' == ''">$(MSBuildProjectDirectory)\MSDeploy\</MsDeployPackagesDir>
	</PropertyGroup>

	<PropertyGroup>
		<BuildProperties>
			DebugSymbols=false;
			DebugType=none
		</BuildProperties>
		<BuildProperties Condition="'$(BuildNumber)' != ''">
			$(BuildProperties);
			BuildNumber=$(BuildNumber);
		</BuildProperties>
		<BuildProperties Condition="'$(SigningKeyFile)' != ''">
			$(BuildProperties);
			AssemblyOriginatorKeyFile=$(SigningKeyFile);
			DelaySign=false
		</BuildProperties>
	</PropertyGroup>

	<!-- ************************************************************************** -->
	<!-- Builds the solution, producing all binary output for the project. -->
	<!-- ************************************************************************** -->
	<Target Name="ValidateBuildConfiguration">

		<Error
			Condition="'$(SolutionFile)' == ''"
			Text="The 'SolutionFile' property does not have a value. This value must be set before building." />

	</Target>

	<!-- ************************************************************************** -->
	<!-- Builds the solution, producing all binary output for the project. -->
	<!-- ************************************************************************** -->
	<Target Name="Build" DependsOnTargets="ValidateBuildConfiguration">

		<!-- Set configuration and platform for the solution-level build. -->
		<PropertyGroup>
			<SolutionProperties>
				Configuration=$(Configuration);
				Platform=$(Platform);
				$(BuildProperties)
			</SolutionProperties>
		</PropertyGroup>

		<PropertyGroup>
			<!-- Rebuild by default, unless incremental builds are enabled. -->
			<BuildTargets>Rebuild</BuildTargets>
			<BuildTargets Condition="$(EnableIncrementalBuild)">Build</BuildTargets>
		</PropertyGroup>

		<Warning Condition="'$(SigningKeyFile)' == ''" Text="SigningKeyFile not specified. Assemblies will be delay-signed." />

		<!-- Run the primary solution build to compile all projects -->
		<MSBuild
			Projects="$(SolutionFile)"
			Properties="$(SolutionProperties)"
			BuildInParallel="true"
			Targets="$(BuildTargets)"/>
	</Target>

	<!-- ************************************************************************** -->
	<!-- Runs unit tests over all projects -->
	<!-- ************************************************************************** -->
	<Target Name="Test" DependsOnTargets="RunNUnitTest"></Target>

	<!-- ************************************************************************** -->
	<!-- Finds unit test assemblies generated by the build -->
	<!-- ************************************************************************** -->
	<Target Name="FindTestAssemblies" DependsOnTargets="Build">

		<!-- Obtain a list of all the assemblies that look testing-related in the build-space. -->
		<ItemGroup>
			<TestAssembly Include="$(RootDir)**\bin\Release\*.Tests.dll">
				<FrameworkVersion>net-4.0</FrameworkVersion>
			</TestAssembly>
		</ItemGroup>

		<Message
			Text="Test assembly: &quot;%(TestAssembly.FileName) (%(FrameworkVersion))&quot;"
			Importance="low"
			Condition="'@(TestAssembly)' != ''" />

		<Warning
			Text="No test assemblies found."
			Condition="'@(TestAssembly)' == ''" />

	</Target>

	<!-- ************************************************************************** -->
	<!-- Runs the NUnit tests for the solution -->
	<!-- ************************************************************************** -->
	<Target Name="CreateTestResultsDir">
		<MakeDir Directories="$(TestResultsDir)" />
	</Target>

	<!-- ************************************************************************** -->
	<!-- Runs the NUnit tests for the solution -->
	<!-- ************************************************************************** -->
	<Target
		Name="RunNUnitTest"
		Outputs="$(TestResultsDir)%(TestAssembly.Filename).Results.xml"
		DependsOnTargets="CreateTestResultsDir;FindTestAssemblies">

		<Message Text="Running tests: &quot;%(TestAssembly.FileName)&quot;" Condition="'%(FileName)' != ''"/>

		<MSBuild.ExtensionPack.CodeQuality.NUnit
			Assemblies="%(TestAssembly.FullPath)"
			ToolPath="$(NUnitToolPath)"
			OutputXmlFile="$(TestResultsDir)%(Filename).Results.xml"
			Framework="%(FrameworkVersion)"
			Condition="'%(FileName)' != ''"/>

	</Target>

	<!-- ************************************************************************** -->
	<!-- Packages the output of the build for deployment -->
	<!-- ************************************************************************** -->
	<Target Name="Package" DependsOnTargets="NuGetPack"></Target>

	<!-- ************************************************************************** -->
	<!-- Creates a set of the files containing metadata for projects -->
	<!-- ************************************************************************** -->
	<Target
		Name="GetProjectMetadataFiles">

		<!-- Build a list of the assemblies which are the sources of project metadata for each project -->
		<ItemGroup>
			<ProjectMetadataFile Include="@(LibraryProject -> '%(BaseDir)%(MetadataAssemblyFile)')">
				<NuSpecFile>%(BaseDir)%(NuSpecFile)</NuSpecFile>
			</ProjectMetadataFile>
		</ItemGroup>

	</Target>

	<!-- ************************************************************************** -->
	<!-- Creates a list of project metadata -->
	<!-- ************************************************************************** -->
	<Target
		Name="GetProjectMetadata"
		Outputs="%(ProjectMetadataFile.Identity)"
		DependsOnTargets="GetProjectMetadataFiles">

		<Message Text="Metadata assembly: &quot;%(ProjectMetadataFile.Identity)&quot;" Importance="low" />

		<ReadProductVersion File="%(ProjectMetadataFile.Identity)">
			<Output PropertyName="PackageVersion" TaskParameter="Version" />
		</ReadProductVersion>

		<ItemGroup>
			<ProjectMetadata Include="%(ProjectMetadataFile.Identity)">
				<NuSpecFile>%(NuSpecFile)</NuSpecFile>
				<PackageVersion>$(PackageVersion.Replace(" ", "-"))</PackageVersion>
				<PackageId>%(ProjectMetadataFile.FileName)</PackageId>
			</ProjectMetadata>
		</ItemGroup>

	</Target>

	<!-- ************************************************************************** -->
	<!-- Creates a list of inputs to the creation of NuGet packages -->
	<!-- ************************************************************************** -->
	<Target
		Name="GetNuGetInput"
		DependsOnTargets="GetProjectMetadata">

		<!-- Create list of NuSpec files with appropriate metadata. -->
		<ItemGroup>
			<NuSpecFile Include="@(ProjectMetadata -> '%(NuSpecFile)')">
				<PackageVersion>%(PackageVersion)</PackageVersion>
				<PackageId>%(PackageId)</PackageId>
			</NuSpecFile>
		</ItemGroup>

	</Target>

	<!-- ************************************************************************** -->
	<!-- Creates NuGet packages for each project -->
	<!-- ************************************************************************** -->
	<Target
		Name="NuGetPack"
		DependsOnTargets="Build;GetNuGetInput"
		Outputs="%(NuSpecFile.RelativeDir)obj\%(NuSpecFile.PackageId).%(NuSpecFile.PackageVersion).nupkg">

		<Message Text="%(NuSpecFile.FileName) -> %(RelativeDir)obj\%(PackageId).%(PackageVersion).nupkg" Importance="high" />

		<PropertyGroup>
			<PackageVersion>%(NuSpecFile.PackageVersion)</PackageVersion>
			<PackageOutputDir>%(NuSpecFile.RelativeDir)obj\</PackageOutputDir>
		</PropertyGroup>

		<ItemGroup>
			<PackProperties Include="Id">
				<Value>%(NuSpecFile.PackageId)</Value>
			</PackProperties>
		</ItemGroup>

		<!-- Construct command to use appropriate metadata properties.-->
		<PropertyGroup>
			<PackageOutputDir Condition="$(PackageOutputDir) == ''">$(OutDir)</PackageOutputDir>

			<PackCommand>$(NuGetCommand) pack "%(NuSpecFile.RelativeDir)%(FileName)%(Extension)"</PackCommand>
			<PackCommand Condition="'$(PackageOutputDir)' != ''">$(PackCommand) -o "$(PackageOutputDir.Trim("\\"))"</PackCommand>
			<PackCommand Condition="$(PackSymbols)">$(PackCommand) -symbols</PackCommand>
			<PackCommand Condition="'$(PackageVersion)' != ''">$(PackCommand) -version "$(PackageVersion)"</PackCommand>
			<PackCommand>$(PackCommand) -Properties @(PackProperties -> '%(Identity)=%(Value)')</PackCommand>
		</PropertyGroup>

		<MakeDir Directories="%(NuSpecFile.RelativeDir)obj\" />

		<Exec Command="$(PackCommand)" />

	</Target>

	<!-- ************************************************************************** -->
	<!-- Creates a list of the NuGet packages produced by the build. -->
	<!-- ************************************************************************** -->
	<Target
		Name="GetOutputNuGetPackages"
		DependsOnTargets="GetNuGetInput">
		<!-- Create list of created packages to filter to publish command.-->
		<ItemGroup>
			<NuGetPackageFile Include="@(NuSpecFile -> '%(RelativeDir)obj\%(FileName).%(PackageVersion).nupkg')" />
		</ItemGroup>
	</Target>

	<!-- ************************************************************************** -->
	<!-- Sets the package publish directory to ensure correct formatting of path. -->
	<!-- ************************************************************************** -->
	<Target Name="SetPackagePublishDir">

		<PropertyGroup>
			<PackagePublishDir Condition="!$(PackagePublishDir.EndsWith('\\'))">$(PackagePublishDir)\</PackagePublishDir>
		</PropertyGroup>

	</Target>

	<!-- ************************************************************************** -->
	<!-- Custom task to read file version information. -->
	<!-- ************************************************************************** -->
	<UsingTask TaskName="ReadProductVersion" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
		<ParameterGroup>
			<File ParameterType="System.String" Required="true" />
			<Version ParameterType="System.String" Output="true" />
		</ParameterGroup>
		<Task>
			<Reference Include="System.Core" />
			<Using Namespace="System" />
			<Using Namespace="System.IO" />
			<Using Namespace="Microsoft.Build.Framework" />
			<Using Namespace="Microsoft.Build.Utilities" />
			<Code Type="Fragment" Language="cs">
				<![CDATA[
					try
					{
						var version = System.Diagnostics.FileVersionInfo.GetVersionInfo(Path.GetFullPath(this.File));
						this.Log.LogMessage(version.ToString());
						this.Version = version.ProductVersion;
					}
					catch (FileNotFoundException ex)
					{
						this.Log.LogError("File not found: {0}", this.File);
					}
					
					return !this.Log.HasLoggedErrors;
				]]>
			</Code>
		</Task>
	</UsingTask>

</Project>