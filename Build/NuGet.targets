<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<PropertyGroup>
		<!-- Enable the restore command to run before builds -->
		<RestorePackages Condition="  '$(RestorePackages)' == '' ">true</RestorePackages>

		<!-- Determines if package restore consent is required to restore packages -->
		<RequireRestoreConsent Condition=" '$(RequireRestoreConsent)' != 'false' ">true</RequireRestoreConsent>

		<!-- Download NuGet.exe if it does not already exist -->
		<DownloadNuGetExe Condition=" '$(DownloadNuGetExe)' == '' ">true</DownloadNuGetExe>
	</PropertyGroup>

	<PropertyGroup>
		<!-- Determines where to find local configuration -->
		<LocalNuGetConfig Condition="'$(LocalNuGetConfig)' == ''">nuget.config</LocalNuGetConfig>
	</PropertyGroup>

	<ItemGroup Condition=" '$(PackageSources)' == '' ">
		<!-- Package sources used to restore packages. By default will used the registered sources under %APPDATA%\NuGet\NuGet.Config -->
		<!--
						<PackageSource Include="https://nuget.org/api/v2/" />
						<PackageSource Include="https://my-nuget-source/nuget/" />
				-->
	</ItemGroup>

	<PropertyGroup>
		<NuGetToolsPath>$(MSBuildThisFileDirectory)</NuGetToolsPath>
		<RunningMono>false</RunningMono>
		<RunningMono Condition=" '$(OS)' != 'Windows_NT'">true</RunningMono>
	</PropertyGroup>

	<PropertyGroup>
		<PackagesConfig>packages.config</PackagesConfig>
		<PackagesConfig Condition="!$(RunningMono)">$([System.IO.Path]::Combine($(ProjectDir), "packages.config"))</PackagesConfig>
	</PropertyGroup>

	<PropertyGroup>
		<!-- NuGet command elements -->
		<NuGetExePath Condition=" '$(NuGetExePath)' == '' ">$(NuGetToolsPath)nuget.exe</NuGetExePath>
		<PackageSources Condition=" $(PackageSources) == '' ">@(PackageSource)</PackageSources>

		<PackSymbols Condition="'$(PackSymbols)' != 'true'">false</PackSymbols>

		<NuGetCommand>"$(NuGetExePath)"</NuGetCommand>
		<!-- We need to launch nuget.exe with the mono command if we're not on windows -->
		<NuGetCommand Condition="$(RunningMono)">mono --runtime=v4.0.30319 $(NuGetExePath)</NuGetCommand>

		<RequireConsentSwitch Condition=" $(RequireRestoreConsent) == 'true' ">-RequireConsent</RequireConsentSwitch>
	</PropertyGroup>

	<!-- Make the build depend on restore packages -->
	<PropertyGroup>
		<BuildDependsOn Condition="$(RestorePackages) == 'true'">
			RestorePackages;
			$(BuildDependsOn)
		</BuildDependsOn>
	</PropertyGroup>

	<Target Name="ReadNuGetConfig" Condition="Exists('$(LocalNuGetConfig)')">
		
		<!-- Get the packages path -->
		<XmlPeek
			XmlInputPath="$(LocalNuGetConfig)"
			Query="//repositoryPath/text()">
			<Output TaskParameter="Result" ItemName="PackagesPath" />
		</XmlPeek>
		
		
		<!-- Assign values to properties. -->
		<PropertyGroup>
			<PackagesDir Condition="'$(PackagesPath)' != ''">$(PackagesPath)</PackagesDir>
		</PropertyGroup>
		
	</Target>

	<Target Name="FindPackagesDir" DependsOnTargets="ReadNuGetConfig" Condition="'$(PackagesDir)' == ''">

		<PropertyGroup>
			<PackagesFolderName>packages\</PackagesFolderName>
		</PropertyGroup>

		<!-- Use the references to guess the location of packages. Condition="'$(PackagesDir)' == ''" -->
		<ItemGroup>
			<LocalReference Include="@(Reference)" Condition="'%(Reference.HintPath)' != ''">
				<IsPackage>$([System.String]::Copy('%(Reference.HintPath)').Contains('$(PackagesFolderName)'))</IsPackage>
			</LocalReference>
		</ItemGroup>

		<!-- Progressively build up metadata for packages to obtain specific substring. -->
		<ItemGroup Condition="'@(LocalReference)' != ''">
			<NuGetReference Include="@(LocalReference)" Condition="%(LocalReference.IsPackage)">
				<PackageDirIndex>$([System.String]::Copy('%(LocalReference.HintPath)').IndexOf('$(PackagesFolderName)'))</PackageDirIndex>
			</NuGetReference>
		</ItemGroup>

		<ItemGroup Condition="'@(NuGetReference)' != ''">
			<NuGetReference2 Include="@(NuGetReference)">
				<PackageDirLength>$([MSBuild]::Add(%(PackageDirIndex), $(PackagesFolderName.Length)))</PackageDirLength>
			</NuGetReference2>
		</ItemGroup>

		<ItemGroup Condition="'@(NuGetReference2)' != ''">
			<NuGetReference3 Include="@(NuGetReference2)">
				<PackageDir>$([System.String]::Copy('%(HintPath)').Substring(0, %(PackageDirLength)))</PackageDir>
			</NuGetReference3>
		</ItemGroup>

		<PropertyGroup Condition="'@(NuGetReference3)' != ''">
			<PackagesDir>$([System.String]::Copy('%(NuGetReference3.PackageDir)').Trim('\\'))</PackagesDir>
		</PropertyGroup>

		<Message Text="Detected packages directory as: &quot;$(PackagesDir)&quot;" Importance="low" Condition="'@(NuGetReference3)' != ''" />

	</Target>

	<Target Name="SetRestoreCommand" DependsOnTargets="ReadNuGetConfig;FindPackagesDir">

		<PropertyGroup>
			<RestoreCommand>$(NuGetCommand) install "$(PackagesConfig)"</RestoreCommand>
			<RestoreCommand Condition="'$(PackageSources)' != ''">$(RestoreCommand) -source "$(PackageSources)"</RestoreCommand>
			<RestoreCommand>$(RestoreCommand) $(RequireConsentSwitch)</RestoreCommand>
			<RestoreCommand Condition="'$(PackagesDir)' != ''">$(RestoreCommand) -o "$(PackagesDir)"</RestoreCommand>
		</PropertyGroup>

	</Target>

	<Target Name="CheckPrerequisites">
		<!-- Raise an error if we're unable to locate nuget.exe  -->
		<Error
			Condition="'$(DownloadNuGetExe)' != 'true' AND !Exists('$(NuGetExePath)')"
			Text="Unable to locate '$(NuGetExePath)'" />

		<SetEnvironmentVariable
			EnvKey="VisualStudioVersion"
			EnvValue="$(VisualStudioVersion)"
			Condition=" '$(VisualStudioVersion)' != '' AND '$(OS)' == 'Windows_NT' " />

		<DownloadNuGet
			OutputFilename="$(NuGetExePath)"
			Condition=" '$(DownloadNuGetExe)' == 'true' AND !Exists('$(NuGetExePath)')" />
	</Target>

	<PropertyGroup>
		<RestorePackagesDependsOn>
			CheckPrerequisites;
			ReadNuGetConfig;
			SetRestoreCommand
		</RestorePackagesDependsOn>
	</PropertyGroup>

	<Target Name="RestorePackages" DependsOnTargets="$(RestorePackagesDependsOn)">

		<Exec
			Command="$(RestoreCommand)"
			LogStandardErrorAsError="$(RunningMono)"
			Condition="Exists('$(PackagesConfig)')" />

	</Target>

	<PropertyGroup>
		<NuGetPackDependsOn>
			CheckPrerequisites;
			ReadNuGetConfig;
			SetPackCommand;
			Build
		</NuGetPackDependsOn>
	</PropertyGroup>

	<!-- Performs the creation of a NuGet package for the project. -->
	<Target
		Name="NuGetPack"
		DependsOnTargets="$(NuGetPackDependsOn)">

		<Exec
			Command="$(PackCommand)"
			LogStandardErrorAsError="$(RunningMono)" />

	</Target>

	<!-- Constructs the command to perform the NuGet package step based on current properties. -->
	<Target Name="SetPackCommand" DependsOnTargets="_GetPackageVersion;ReadNuGetConfig">

		<PropertyGroup>
			<PackageOutputDir Condition="$(PackageOutputDir) == ''">$(OutDir)</PackageOutputDir>

			<PackCommand>$(NuGetCommand) pack "$(ProjectPath)" -p Configuration=$(Configuration)</PackCommand>
			<PackCommand Condition="'$(PackageOutputDir)' != ''">$(PackCommand) -o "$(PackageOutputDir.Trim("\\"))"</PackCommand>
			<PackCommand Condition="$(PackSymbols)">$(PackCommand) -symbols</PackCommand>
			<PackCommand Condition="'$(PackageVersion)' != ''">$(PackCommand) -version "$(PackageVersion)"</PackCommand>
		</PropertyGroup>

	</Target>

	<!-- Obtains the version of the assembly targeted by the project as a post-build step. -->
	<Target Name="_GetPackageVersion" DependsOnTargets="Build">

		<PropertyGroup>
			<AssemblyFile>$(MSBuildProjectDirectory)\$(OutputPath)$(AssemblyName).exe</AssemblyFile>
			<AssemblyFile Condition="'$(OutputType)' == 'Library'">$(MSBuildProjectDirectory)\$(OutputPath)$(AssemblyName).dll</AssemblyFile>
		</PropertyGroup>

		<Message Text="Metadata assembly: &quot;$(AssemblyFile)&quot;" Importance="low" />

		<ReadProductVersion File="$(AssemblyFile)">
			<Output PropertyName="PackageVersion" TaskParameter="Version" />
		</ReadProductVersion>

		<PropertyGroup>
			<!-- Remove any spaces in the package version, to be replaced with hyphens. -->
			<PackageVersion>$(PackageVersion.Replace(" ", "-"))</PackageVersion>
		</PropertyGroup>

	</Target>

	<UsingTask TaskName="DownloadNuGet" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
		<ParameterGroup>
			<OutputFilename ParameterType="System.String" Required="true" />
		</ParameterGroup>
		<Task>
			<Reference Include="System.Core" />
			<Using Namespace="System" />
			<Using Namespace="System.IO" />
			<Using Namespace="System.Net" />
			<Using Namespace="Microsoft.Build.Framework" />
			<Using Namespace="Microsoft.Build.Utilities" />
			<Code Type="Fragment" Language="cs">
				<![CDATA[
								try {
										OutputFilename = Path.GetFullPath(OutputFilename);

										Log.LogMessage("Downloading latest version of NuGet.exe...");
										WebClient webClient = new WebClient();
										webClient.DownloadFile("https://nuget.org/nuget.exe", OutputFilename);

										return true;
								}
								catch (Exception ex) {
										Log.LogErrorFromException(ex);
										return false;
								}
						]]>
			</Code>
		</Task>
	</UsingTask>

	<UsingTask TaskName="SetEnvironmentVariable" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
		<ParameterGroup>
			<EnvKey ParameterType="System.String" Required="true" />
			<EnvValue ParameterType="System.String" Required="true" />
		</ParameterGroup>
		<Task>
			<Using Namespace="System" />
			<Code Type="Fragment" Language="cs">
				<![CDATA[
								try {
										Environment.SetEnvironmentVariable(EnvKey, EnvValue, System.EnvironmentVariableTarget.Process);
								}
								catch  {
								}
						]]>
			</Code>
		</Task>
	</UsingTask>

	<!-- Custom task to read file version information. -->
	<UsingTask TaskName="ReadProductVersion" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
		<ParameterGroup>
			<File ParameterType="System.String" Required="true" />
			<Version ParameterType="System.String" Output="true" />
		</ParameterGroup>
		<Task>
			<Reference Include="System.Core" />
			<Using Namespace="System" />
			<Using Namespace="System.IO" />
			<Using Namespace="Microsoft.Build.Framework" />
			<Using Namespace="Microsoft.Build.Utilities" />
			<Code Type="Fragment" Language="cs">
				<![CDATA[
					try
					{
						var version = System.Diagnostics.FileVersionInfo.GetVersionInfo(this.File);
						this.Log.LogMessage(version.ToString());
						this.Version = version.ProductVersion;
					}
					catch (FileNotFoundException ex)
					{
						this.Log.LogErrorFromException(ex);
					}
					
					return !this.Log.HasLoggedErrors;
				]]>
			</Code>
		</Task>
	</UsingTask>
</Project>